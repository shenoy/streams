{"ast":null,"code":"var _jsxFileName = \"/home/rajesh/streams/streamy/src/components/streams/StreamShow.js\";\nimport React from 'react';\nimport flv from 'flv.js';\nimport { connect } from 'react-redux';\nimport { fetchStream } from '../../actions';\n\nclass StreamShow extends React.Component {\n  constructor(props) {\n    super(props);\n    this.videoRef = React.createRef();\n  }\n\n  componentDidMount() {\n    const id = this.props.match.params.id;\n    this.props.fetchStream(id);\n    this.videoPlayer = flv.createPlayer({\n      type: 'flv',\n      url: \"http://localhost:8000/live/\".concat(id, \".flv\")\n    });\n    this.videoPlayer.attach;\n  }\n\n  render() {\n    if (!this.props.stream) {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 28\n        },\n        __self: this\n      }, \"...Loading\\\"\");\n    }\n\n    const _this$props$stream = this.props.stream,\n          title = _this$props$stream.title,\n          description = _this$props$stream.description;\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33\n      },\n      __self: this\n    }, React.createElement(\"video\", {\n      ref: this.videoRef,\n      style: {\n        width: '100%'\n      },\n      controls: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34\n      },\n      __self: this\n    }), React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35\n      },\n      __self: this\n    }, title), React.createElement(\"h5\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36\n      },\n      __self: this\n    }, description));\n  }\n\n}\n\nconst mapStateToProps = (state, ownProps) => {\n  return {\n    stream: state.streams[ownProps.match.params.id]\n  };\n};\n\nexport default connect(mapStateToProps, {\n  fetchStream\n})(StreamShow);","map":{"version":3,"sources":["/home/rajesh/streams/streamy/src/components/streams/StreamShow.js"],"names":["React","flv","connect","fetchStream","StreamShow","Component","constructor","props","videoRef","createRef","componentDidMount","id","match","params","videoPlayer","createPlayer","type","url","attach","render","stream","title","description","width","mapStateToProps","state","ownProps","streams"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,GAAP,MAAgB,QAAhB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,WAAT,QAA4B,eAA5B;;AAGA,MAAMC,UAAN,SAAyBJ,KAAK,CAACK,SAA/B,CAAyC;AACvCC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AACA,SAAKC,QAAL,GAAgBR,KAAK,CAACS,SAAN,EAAhB;AACD;;AAEDC,EAAAA,iBAAiB,GAAG;AAAA,UAEVC,EAFU,GAEH,KAAKJ,KAAL,CAAWK,KAAX,CAAiBC,MAFd,CAEVF,EAFU;AAGlB,SAAKJ,KAAL,CAAWJ,WAAX,CAAuBQ,EAAvB;AACA,SAAKG,WAAL,GAAmBb,GAAG,CAACc,YAAJ,CAAiB;AAClCC,MAAAA,IAAI,EAAE,KAD4B;AAElCC,MAAAA,GAAG,uCAAgCN,EAAhC;AAF+B,KAAjB,CAAnB;AAKA,SAAKG,WAAL,CAAiBI,MAAjB;AACD;;AAEDC,EAAAA,MAAM,GAAG;AAEP,QAAI,CAAC,KAAKZ,KAAL,CAAWa,MAAhB,EAAwB;AACtB,aAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAAP;AACD;;AAJM,+BAMwB,KAAKb,KAAL,CAAWa,MANnC;AAAA,UAMCC,KAND,sBAMCA,KAND;AAAA,UAMQC,WANR,sBAMQA,WANR;AAOP,WACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAO,MAAA,GAAG,EAAE,KAAKd,QAAjB;AAA2B,MAAA,KAAK,EAAE;AAAEe,QAAAA,KAAK,EAAE;AAAT,OAAlC;AAAqD,MAAA,QAAQ,MAA7D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAKF,KAAL,CAFF,EAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAKC,WAAL,CAHF,CADF;AAOD;;AAhCsC;;AAmCzC,MAAME,eAAe,GAAG,CAACC,KAAD,EAAQC,QAAR,KAAqB;AAE3C,SAAO;AAAEN,IAAAA,MAAM,EAAEK,KAAK,CAACE,OAAN,CAAcD,QAAQ,CAACd,KAAT,CAAeC,MAAf,CAAsBF,EAApC;AAAV,GAAP;AAED,CAJD;;AAMA,eAAeT,OAAO,CAACsB,eAAD,EAAkB;AAAErB,EAAAA;AAAF,CAAlB,CAAP,CAA0CC,UAA1C,CAAf","sourcesContent":["import React from 'react';\nimport flv from 'flv.js';\nimport { connect } from 'react-redux';\nimport { fetchStream } from '../../actions'\n\n\nclass StreamShow extends React.Component {\n  constructor(props) {\n    super(props)\n    this.videoRef = React.createRef();\n  }\n\n  componentDidMount() {\n\n    const { id } = this.props.match.params;\n    this.props.fetchStream(id);\n    this.videoPlayer = flv.createPlayer({\n      type: 'flv',\n      url: `http://localhost:8000/live/${id}.flv`\n\n    });\n    this.videoPlayer.attach\n  }\n\n  render() {\n\n    if (!this.props.stream) {\n      return <div>...Loading\"</div>\n    }\n\n    const { title, description } = this.props.stream;\n    return (\n      <div>\n        <video ref={this.videoRef} style={{ width: '100%' }} controls />\n        <h1>{title}</h1>\n        <h5>{description}</h5>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state, ownProps) => {\n\n  return { stream: state.streams[ownProps.match.params.id] }\n\n};\n\nexport default connect(mapStateToProps, { fetchStream })(StreamShow);\n\n"]},"metadata":{},"sourceType":"module"}